// By Ahmad Khdair 
// 1-72 main ,,  73 - 206 Doctor ,, 207-293 Department ,,  294-304 Bill Interface ,, 305-341 Emergency Patient ,, 342-397 Hospital Services ,, 398-443 LongTermPatient ,, 443-538 PatientBase .
import java.util.*;
public class Driver {
        public static ArrayList<Doctor> sortDoctorsBySalary(ArrayList<Doctor> list){
            Collections.sort(list);   // since i use sort, so i should override the method compareTo which it at comparable interface , so i did it (at doctor class)
              return list;
        }
        public static double calculateTotalPatientsBill(ArrayList<PatientBase> list){
            double result=0;
            for(int i=0;i<list.size();i++){
               result+=list.get(i).calculateBill();
            }
            return result;
        }
        public static void generateBill(PatientBase patient){
            System.out.println("The Name Of The Patient Is: "+patient.getName()+" , The Age Of The Patient Is: "+patient.getAge()+" , The Bill Of The Patient Is: "+patient.calculateBill());
        }
    public static void  main(String[] args){

        //Departments:
        ArrayList<Department> listOfDepartment=new ArrayList();
        Department dep1=new Department("A1","Dep1");
        Department dep2=new Department("A2","Dep2");
        Department dep3=new Department("A3","Dep3");
        listOfDepartment.add(dep1);
        listOfDepartment.add(dep2);
        listOfDepartment.add(dep3);
            //Patients:
            ArrayList<PatientBase> listOfPatients=new ArrayList();
            EmergencyPatient patient1 =new EmergencyPatient("E103","Nasser",19,"History test",dep1,100);
            EmergencyPatient patient2 =new EmergencyPatient("E206","mohammad",32,"History test2",dep3,25);
            LongTermPatient patient3=new LongTermPatient("E206","mohammad",32,"History test2",dep3,3,50);
            listOfPatients.add(patient1);
            listOfPatients.add(patient2);
            listOfPatients.add(patient3);
                //Doctors:
                ArrayList<Doctor> listOfDoctors=new ArrayList();
                Doctor doc1=new Doctor("K01","Khdair","spec 1","PhD",500,10,11,dep2);
                Doctor doc2=new Doctor("K04","moha","spec 3","Master",100,6,7,dep1);
                listOfDoctors.add(doc1);
                listOfDoctors.add(doc2);
                              //Services: 
                              ArrayList<HospitalService> listOfHosServices=new ArrayList();
                              HospitalService serv1=new HospitalService("X-RAY",1200,patient1);
                              HospitalService serv2=new HospitalService("MRL",1600,patient1);
                              HospitalService serv3=new HospitalService("LAB TESTS",2500,patient2);
                              
            Collections.sort(listOfPatients);
            if(listOfPatients.size()>=3){
                System.out.println("The Third Patient Bill:");
                generateBill((listOfPatients.get(2)));
            }
            else
                System.out.println("Number Of Patients is Less than Three.");

            sortDoctorsBySalary(listOfDoctors);
            for(int i=0;i< listOfDoctors.size();i++){
                System.out.println("For Doctor #"+(i+1)+" , The Name Of Department Is:"+listOfDoctors.get(i).getDepartment().getName()+" and the Salary is:"+listOfDoctors.get(i).calculateSalary());
            }

            for(int i=0;i< listOfPatients.size();i++){
                System.out.println("The Name Of #"+(i+1)+" Patient is "+listOfPatients.get(i).getName()+" , The Age Is "+listOfPatients.get(i).getAge());
                
            }
        System.out.println("The Total Sum of All Patients Bill is: "+calculateTotalPatientsBill(listOfPatients));

            
    }
}






import java.util.*;
public class Doctor implements Comparable<Doctor>{

    private String doctorId;
    private String name;
    private String specialty;
    private String degree;
    private double baseSalary;
    private double overtimeHours;
    private double overtimeRate;
    private Department department;

    public Doctor() {

    }

    public Doctor(String doctorId, String name, String specialty, String degree, double baseSalary, double overtimeHours, double overtimeRate, Department department) {
        this.doctorId = doctorId;
        this.name = name;
        this.specialty = specialty;
        this.degree = degree;
        this.baseSalary = baseSalary;
        this.overtimeHours = overtimeHours;
        this.overtimeRate = overtimeRate;
        this.department = department;
    }

    public String getDoctorId() {
        return doctorId;
    }

    public void setDoctorId(String doctorId) {
        this.doctorId = doctorId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSpecialty() {
        return specialty;
    }

    public void setSpecialty(String specialty) {
        this.specialty = specialty;
    }

    public String getDegree() {
        return degree;
    }

    public void setDegree(String degree) {
        this.degree = degree;
    }

    public double getBaseSalary() {
        return baseSalary;
    }

    public void setBaseSalary(double baseSalary) {
        this.baseSalary = baseSalary;
    }

    public double getOvertimeHours() {
        return overtimeHours;
    }

    public void setOvertimeHours(double overtimeHours) {
        this.overtimeHours = overtimeHours;
    }

    public double getOvertimeRate() {
        return overtimeRate;
    }

    public void setOvertimeRate(double overtimeRate) {
        this.overtimeRate = overtimeRate;
    }

    public Department getDepartment() {
        return department;
    }

    public void setDepartment(Department department) {
        this.department = department;
    }

    public double calculateSalary(){
        if(degree.equalsIgnoreCase("Bachelor"))
            return this.baseSalary + this.baseSalary*0.1 + calculateOvertimePay();

        else if(degree.equalsIgnoreCase("Master"))
            return this.baseSalary + this.baseSalary*0.2 + calculateOvertimePay();
        else if(degree.equalsIgnoreCase("PhD"))
            return this.baseSalary + this.baseSalary*0.3 + calculateOvertimePay();
        else
            return 0; // its should not access for this case, cuz we just have the 3 degree . .( i put it to remove the error )
    }
    public double calculateOvertimePay(){
        return this.overtimeHours*this.overtimeRate;
    }
    public int compareTo(Doctor o) {
        if(this.calculateSalary()>o.calculateSalary())
            return 1;
        else if(this.calculateSalary()<o.calculateSalary())
            return -1;
        else
            return 0;
    }
    @Override
    public String toString() {
        return "Doctor{" +
                "doctorId='" + doctorId + '\'' +
                ", name='" + name + '\'' +
                ", specialty='" + specialty + '\'' +
                ", degree='" + degree + '\'' +
                ", baseSalary=" + baseSalary +
                ", overtimeHours=" + overtimeHours +
                ", overtimeRate=" + overtimeRate +
                ", department=" + department +
                '}';
    }
}








import java.util.*;

public class Department {
    private String departmentId;
    private String name;
    private ArrayList<PatientBase> patientsList=new ArrayList();
    private ArrayList<Doctor> doctors=new ArrayList();

    public Department() {

    }
    public Department(String departmentId, String name) {
        this.departmentId = departmentId;
        this.name = name;
        this.patientsList = patientsList;
        this.doctors = doctors;
    }

    public Department(String departmentId, String name, ArrayList<PatientBase> patientsList, ArrayList<Doctor> doctors) {
        this.departmentId = departmentId;
        this.name = name;
        this.patientsList = patientsList;
        this.doctors = doctors;
    }

    public String getDepartmentId() {
        return departmentId;
    }

    public void setDepartmentId(String departmentId) {
        this.departmentId = departmentId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public ArrayList<PatientBase> getPatientsList() {
        return patientsList;
    }

    public void setPatientsList(ArrayList<PatientBase> patientsList) {
        this.patientsList = patientsList;
    }

    public ArrayList<Doctor> getDoctors() {
        return doctors;
    }

    public void setDoctors(ArrayList<Doctor> doctors) {
        this.doctors = doctors;
    }

    public void addDoctor(Doctor doctor){
        if(!(doctors.contains(doctor))) // this i just a simple case that to check if the doctor is already at the list or nor
            doctors.add(doctor);
        else
            System.out.println("Doctor already exists in the department.");
    }
    public void addPatient(PatientBase patientBase){
        if(!(patientsList.contains(patientBase))) // the same case , to check if the patient exists or not
            patientsList.add(patientBase);
        else
            System.out.println("Patient already exists in the department.");
    }

    @Override
    public String toString() {
        return "Department{" +
                "departmentId='" + departmentId + '\'' +
                ", name='" + name + '\'' +
                ", patientsList=" + patientsList +
                ", doctors=" + doctors +
                '}';
    }
}






public interface Billable {
    double TAX_RATE = 10;
    public double calculateBill();

}





public class EmergencyPatient extends PatientBase {
    private double emergencyFee;

    public EmergencyPatient() {

    }



    public EmergencyPatient(String patientId, String name, int age, String medicalHistory, Department department, double emergencyFee) {
        super(patientId, name, age, medicalHistory, department);
        this.emergencyFee = emergencyFee;
    }

    public double getEmergencyFee() {
        return emergencyFee;
    }

    public void setEmergencyFee(double emergencyFee) {
        this.emergencyFee = emergencyFee;
    }



    public double calculateBill(){
        double totalServicesCost=0;
        for(int i=0;i< this.getServices().size();i++){
        totalServicesCost+=this.getServices().get(i).getServiceCost(); // to calculate the total of cost, such that i take the index i for every loop then get the service cost
        }
        return emergencyFee+totalServicesCost*(1+TAX_RATE);
    }
}









public class HospitalService {
    private String serviceName;
    private double serviceCost;
    private PatientBase patient;

    public HospitalService() {
    }

    public HospitalService(String serviceName, double serviceCost, PatientBase patient) {
        this.serviceName = serviceName;
        this.serviceCost = serviceCost;
        this.patient = patient;
    }

    public String getServiceName() {
        return serviceName;
    }

    public void setServiceName(String serviceName) {
        this.serviceName = serviceName;
    }

    public double getServiceCost() {
        return serviceCost;
    }

    public void setServiceCost(double serviceCost) {
        this.serviceCost = serviceCost;
    }

    public PatientBase getPatient() {
        return patient;
    }

    public void setPatient(PatientBase patient) {
        this.patient = patient;
    }

    @Override
    public String toString() {
        return "HospitalService{" +
                "serviceName='" + serviceName + '\'' +
                ", serviceCost=" + serviceCost +
                ", patientBase=" + patient +
                '}';
    }
}






public class LongTermPatient extends PatientBase{
    private int daysAdmitted;
    private double dailyRate;

    public LongTermPatient() {

    }

    public LongTermPatient(String patientId, String name, int age, String medicalHistory,Department department, int daysAdmitted,int dailyRate) {
        super(patientId, name, age, medicalHistory,department);
        this.daysAdmitted = daysAdmitted;
        this.dailyRate=dailyRate;
    }

    public int getDaysAdmitted() {
        return daysAdmitted;
    }

    public void setDaysAdmitted(int daysAdmitted) {
        this.daysAdmitted = daysAdmitted;
    }

    public double getDailyRate() {
        return dailyRate;
    }

    public void setDailyRate(double dailyRate) {
        this.dailyRate = dailyRate;
    }


    @Override
    public double calculateBill() {
        double totalServicseCost=0;
        for(int i=0;i<this.getServices().size();i++){
            totalServicseCost+=this.getServices().get(i).getServiceCost(); // as the emergencyPatient class method
        }
        return this.daysAdmitted*this.dailyRate+totalServicseCost*(1+TAX_RATE);
    }
}






import java.util.ArrayList;

public abstract class PatientBase implements Billable,Comparable<PatientBase> {
    private String patientId;
    private String name;
    private int age;
    private String medicalHistory;
    private Department department;
    private ArrayList<HospitalService> services=new ArrayList<>();

    public PatientBase() {

    }

    public PatientBase(String patientId, String name, int age, String medicalHistory,Department department) {
        this.patientId = patientId;
        this.name = name;
        this.age = age;
        this.medicalHistory = medicalHistory;
        this.department=department;
    }

    public String getPatientId() {
        return patientId;
    }

    public void setPatientId(String patientId) {
        this.patientId = patientId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getMedicalHistory() {
        return medicalHistory;
    }

    public void setMedicalHistory(String medicalHistory) {
        this.medicalHistory = medicalHistory;
    }

    public Department getDepartment() {
        return department;
    }

    public void setDepartment(Department department) {
        this.department = department;
    }

    public ArrayList<HospitalService> getServices() {
        return services;
    }

    public void setServices(ArrayList<HospitalService> services) {
        this.services = services;
    }

    public int compareTo(PatientBase o){
        if(this.calculateBill()>o.calculateBill())
            return 1;
        else if(this.calculateBill()<o.calculateBill())
            return -1;
        else return 0;
    }

    @Override
    public String toString() {
        return "PatientBase{" +
                "patientId='" + patientId + '\'' +
                ", name='" + name + '\'' +
                ", age=" + age +
                ", medicalHistory='" + medicalHistory + '\'' +
                ", department=" + department +
                ", services=" + services +
                '}';
    }
}
